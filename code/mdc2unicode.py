# on inclut le code de Christian Casey MdC2Unicode
dAscii2Transliteration = { '!': 'H', '#': '·∏™', '$': 'HÃ≤', '%': 'S', '&': 'T', '*': '·πÆ', '+': '·∏é', '@': '·∏§', 'A': 'Íú£', 'C': '≈ö', 'D': '·∏è', 'H': '·∏•', 'O': 'Q', 'Q': '·∏≤', 'S': '≈°', 'T': '·πØ', 'V': 'hÃ≠', 'X': '·∫ñ', '\\': 'ìèû', '^': '≈†', '_': 'D', 'a': 'Íú•', 'c': '≈õ', 'i': '·ªâ', 'o': 'q', 'q': '·∏≥', 'v': '·π±', 'x': '·∏´' }
def unicodeTransliteration(sAscii):
    sUnicode = ''
    for i, c in enumerate(sAscii):
        if c in dAscii2Transliteration.keys():
            sUnicode += dAscii2Transliteration[c]
        else:
            sUnicode += c
    return sUnicode
# fin du code MdC2Unicode

dUnicode2Ascii={}
for k,v in dAscii2Transliteration.items():
    dUnicode2Ascii[v]=k

def unicode2mdc(sUnicode):
    #normalize yod
    sMdc=""
    sUnicode=sUnicode.replace(u"\u0069\u0486",u"\u1EC9")
    sUnicode=sUnicode.replace(u"\u0069\u0313",u"\u1EC9")
    for i,c in enumerate(sUnicode):
        if c in dUnicode2Ascii.keys():
            sMdc+=dUnicode2Ascii[c]
        else:
            sMdc+=c
    return sMdc

    


    
